classDiagram
  class Base {
    created_at : Mapped[datetime]
    id : Mapped[UUID]
    updated_at : Mapped[datetime]
  }
  class CatchByBotDetectionError {
  }
  class CompetitorData {
    market_cap
    name : str
  }
  class DailyOpenCloseStock {
    after_hours : float
    close : float
    date : str
    high : float
    low : float
    open : float
    pre_market : float
    status : str
    symbol : str
    volume : float
  }
  class DatabaseSessionManager {
    _engine : AsyncEngine, NoneType
    _sessionmaker : NoneType, async_sessionmaker
    engine_kwargs : dict[str, Any]
    __init__(host: str, engine_kwargs: dict[str, Any] | None) None
    close() None
    connect() AsyncIterator[AsyncConnection]
    session() AsyncIterator[AsyncSession]
  }
  class LogConfig {
    LOGGERS : dict | None
    LOGGER_NAME : str | None
    LOG_FORMAT : str
    LOG_LEVEL : str
    disable_existing_loggers : bool
    version : int
    formatters() dict
    handlers() dict
    loggers() dict
  }
  class MarketCapData {
    currency : str
    value : float
  }
  class MarketWatchRepository {
    _chrome_options
    settings
    __init__(settings: Settings) None
    _async_get_stock_page_html(stock_symbol: str) BeautifulSoup
    _close_subscriber_banner(driver: webdriver.Chrome) None
    _get_stock_page_html(stock_symbol: str) BeautifulSoup
    _is_captcha_open(driver: webdriver.Chrome) bool
    get_company_name_by_symbol(stock_symbol: str) str
    get_stock_competitors_by_symbol(stock_symbol: str) list[CompetitorData]
    get_stock_performance_by_symbol(stock_symbol: str) PerformanceData
  }
  class MarketWatchRepositoryInterface {
    get_company_name_by_symbol(stock_symbol: str)* str
    get_stock_competitors_by_symbol(stock_symbol: str)* list[CompetitorData]
    get_stock_performance_by_symbol(stock_symbol: str)* PerformanceData
  }
  class OpenCloseStockRepository {
    settings
    __init__(settings: Settings) None
    get_daily_open_close_sotck(stock_symbol: str, date: date) DailyOpenCloseStock
  }
  class OpenCloseStockRepositoryInterface {
    get_daily_open_close_sotck(stock_symbol: str, date: date)* DailyOpenCloseStock
  }
  class PerformanceData {
    five_days : float
    one_month : float
    one_year : float
    three_months : float
    year_to_date : float
  }
  class PurchaseRequestBody {
    amount : int
  }
  class PurchaseResponse {
    message : str
  }
  class Purchases {
    __tablename__ : str
    amount : Mapped[int]
    company_code : Mapped[str]
  }
  class PurchasesRepository {
    session : AsyncSession
    settings
    __init__(settings: Settings, session: AsyncSession) None
    get_purchases_total_amount_by_symbol(stock_symbol: str) int
    purchase_stock(company_code: str, amount: int) None
  }
  class PurchasesRepositoryInterface {
    get_purchases_total_amount_by_symbol(stock_symbol: str)* float
    purchase_stock(company_code: str, amount: int)* None
  }
  class Settings {
    default_caching_time : int
    marketwatch_base_url : str
    model_config
    polygon_api_key : str
    polygon_base_url : str
    postgres_db : str
    postgres_drivername : str
    postgres_host : str
    postgres_password : str
    postgres_port : str | None
    postgres_username : str
    redis_url : str
    remote_chrome_webdriver_address : str
    selenium_headless_mode : bool
  }
  class StockData {
    company_code : str
    company_name : str
    competitors : list[CompetitorData]
    performance_data
    purchased_amount : int | None
    purchased_status : str | None
    request_data : date
    status : str
    stock_values
  }
  class StockService {
    marketwatch_repository
    open_close_stock_repository
    purchases_repository
    __init__(settings: Settings, session: AsyncSession) None
    get_stock_by_symbol(stock_symbol: str, date: date) StockData
    purchase_stock(stock_symbol: str, amount: int) None
  }
  class StockValuesData {
    close : float
    high : float
    low : float
    open : float
  }
  Purchases --|> Base
  MarketWatchRepository --|> MarketWatchRepositoryInterface
  OpenCloseStockRepository --|> OpenCloseStockRepositoryInterface
  PurchasesRepository --|> PurchasesRepositoryInterface
  MarketCapData --* CompetitorData : market_cap
  PerformanceData --* StockData : performance_data
  StockValuesData --* StockData : stock_values
  MarketWatchRepository --* StockService : marketwatch_repository
  OpenCloseStockRepository --* StockService : open_close_stock_repository
  PurchasesRepository --* StockService : purchases_repository
  Settings --o MarketWatchRepository : settings
  Settings --o OpenCloseStockRepository : settings
  Settings --o PurchasesRepository : settings
